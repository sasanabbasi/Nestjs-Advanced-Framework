import { Decorator, Identifier, LeftHandSideExpression, Node, NodeArray, NodeFactory, Type, TypeChecker, TypeFlags, TypeFormatFlags, TypeNode } from 'typescript/lib/tsserverlibrary';
export declare function hasFlag(type: Type, flag: TypeFlags): boolean;
export declare function isFilenameMatched(patterns: string[], filename: string): boolean;
export declare function isDynamicallyAdded(identifier: Node): boolean;
export declare function isNullableUnionType(type: Type): boolean;
export declare function isArrayType(type: Type): boolean;
export declare function isBoolean(type: Type): boolean;
export declare function isEnumType(type: Type): boolean;
export declare function isNumber(type: Type): boolean;
export declare function isNumberEnum(type: Type): boolean;
export declare function isString(type: Type): boolean;
export declare function isStringEnum(type: Type): boolean;
export declare function isDate(type: Type): boolean;
export declare function getDecoratorOrUndefinedByNames(names: string[], factory: NodeFactory, decorators?: NodeArray<Decorator>): Decorator | undefined;
export declare function getDecoratorName(decorator: Decorator): string | undefined;
export declare function getNameFromExpression(expression: LeftHandSideExpression): Identifier | LeftHandSideExpression;
export declare function getIdentifierFromExpression(expression: LeftHandSideExpression): Identifier;
export declare function getText(type: Type, typeChecker: TypeChecker, enclosingNode?: Node, typeFormatFlags?: TypeFormatFlags): string;
export declare function getDefaultTypeFormatFlags(enclosingNode?: Node): number;
export declare function getTypeReference(type: Type, typeNode: TypeNode, typeChecker: TypeChecker, isArray?: boolean): [elementType: string | undefined, isArray: boolean];
export declare function replaceImportPath(typeReference: string, fileName: string): string | undefined;
