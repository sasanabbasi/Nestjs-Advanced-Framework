"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.memoryStore = void 0;
var lru_cache_1 = __importDefault(require("lru-cache"));
var lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
function clone(object) {
    if (typeof object === 'object' && object !== null) {
        return (0, lodash_clonedeep_1["default"])(object);
    }
    return object;
}
/**
 * Wrapper for lru-cache.
 */
function memoryStore(args) {
    var _this = this;
    var _a;
    var shouldCloneBeforeSet = (args === null || args === void 0 ? void 0 : args.shouldCloneBeforeSet) !== false; // clone by default
    var isCacheable = (_a = args === null || args === void 0 ? void 0 : args.isCacheable) !== null && _a !== void 0 ? _a : (function (val) { return val !== undefined; });
    var lruOpts = __assign(__assign({}, args), { max: (args === null || args === void 0 ? void 0 : args.max) || 500, ttl: (args === null || args === void 0 ? void 0 : args.ttl) ? args.ttl : 0 });
    var lruCache = new lru_cache_1["default"](lruOpts);
    return {
        del: function (key) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    lruCache["delete"](key);
                    return [2 /*return*/];
                });
            });
        },
        get: function (key) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, lruCache.get(key)];
        }); }); },
        keys: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, __spreadArray([], __read(lruCache.keys()), false)];
        }); }); },
        mget: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, args.map(function (x) { return lruCache.get(x); })];
            }); });
        },
        mset: function (args, ttl) {
            return __awaiter(this, void 0, void 0, function () {
                var opt, args_1, args_1_1, _a, key, value;
                var e_1, _b;
                return __generator(this, function (_c) {
                    opt = { ttl: ttl ? ttl : lruOpts.ttl };
                    try {
                        for (args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                            _a = __read(args_1_1.value, 2), key = _a[0], value = _a[1];
                            if (!isCacheable(value))
                                throw new Error("no cacheable value ".concat(JSON.stringify(value)));
                            if (shouldCloneBeforeSet)
                                lruCache.set(key, clone(value), opt);
                            else
                                lruCache.set(key, value, opt);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (args_1_1 && !args_1_1.done && (_b = args_1["return"])) _b.call(args_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    return [2 /*return*/];
                });
            });
        },
        mdel: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var args_2, args_2_1, key;
                var e_2, _a;
                return __generator(this, function (_b) {
                    try {
                        for (args_2 = __values(args), args_2_1 = args_2.next(); !args_2_1.done; args_2_1 = args_2.next()) {
                            key = args_2_1.value;
                            lruCache["delete"](key);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (args_2_1 && !args_2_1.done && (_a = args_2["return"])) _a.call(args_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    return [2 /*return*/];
                });
            });
        },
        reset: function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    lruCache.clear();
                    return [2 /*return*/];
                });
            });
        },
        ttl: function (key) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, lruCache.getRemainingTTL(key)];
        }); }); },
        set: function (key, value, opt) {
            return __awaiter(this, void 0, void 0, function () {
                var ttl;
                return __generator(this, function (_a) {
                    if (!isCacheable(value))
                        throw new Error("no cacheable value ".concat(JSON.stringify(value)));
                    if (shouldCloneBeforeSet)
                        value = clone(value);
                    ttl = opt ? opt : lruOpts.ttl;
                    lruCache.set(key, value, { ttl: ttl });
                    return [2 /*return*/];
                });
            });
        },
        /**
         * This method is not available in the caching modules.
         */
        keyCount: function () { return lruCache.size; },
        /**
         * This method is not available in the caching modules.
         */
        dump: function () { return lruCache.dump(); },
        /**
         * This method is not available in the caching modules.
         */
        load: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return lruCache.load.apply(lruCache, __spreadArray([], __read(args), false));
        }
    };
}
exports.memoryStore = memoryStore;
//# sourceMappingURL=memory.js.map